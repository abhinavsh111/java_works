package com.server;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import com.agoda.http.api.CountAndTime;
import com.agoda.http.hotelinfo.HotelInfo;
import com.agoda.http.hotelinfo.HotelInfoLoader;

/**
 * @author abhinav
 * 
 */

/** A simple HTTP server that generates a Web page as per 
 * the request generated by the Web client.
 * To use this just run this class and hit the http://localhost:15000/{api name},
 * and this will return the valid response for legitimate request
 * */
public class JavaWebServer {

	/* Initializing variable */
	private static final int fNumberOfThreads = 100;
	private static final Executor fThreadPool = Executors.newFixedThreadPool(fNumberOfThreads);
	private static final Properties prop = new Properties();
	private static final long TIME_LIMIT = 1 * 60 * 1000l;
	private static final long SLEEP_TIME = 5 * 60 * 1000l;
	private static final String FILE_PATH = "hoteldb.csv";
	private static final int PORT = 1500;
	private static final String DEFAULT_RATE = "4";

	/**
	 * Loads the configuration files using Properties class
	 */
	private static void configure() {

		try {
			String fileName = "api.cfg";
			InputStream is = new FileInputStream(fileName);
			// load the properties file
			prop.load(is);

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * 
	 * @param args
	 * @throws IOException
	 */
	@SuppressWarnings("resource")
	public static void main(String[] args) throws IOException {

		ServerSocket socket = new ServerSocket(PORT);
		System.out.println("httpServer running on port "
				+ socket.getLocalPort());
		final Map<String, CountAndTime> apiCountMap = new ConcurrentHashMap<String, CountAndTime>();
		configure();

		Set<Object> keys = prop.keySet();
		// Setting up the default values in apiCountMap 
		for (Object k : keys) {

			String key = (String) k;
			CountAndTime ct = new CountAndTime();
			apiCountMap.put(key, ct);
		}

		// This will create a new Thread for each request 
		while (true) {

			final Socket connection = socket.accept();
			Runnable task = new Runnable() {
				@Override
				public void run() {
					HandleRequest(connection, apiCountMap);
				}
			};

			fThreadPool.execute(task);
		}
	}

	/**
	 * This method parses the request header to get the parameter.
	 * It also keeps track of the individual api hit and the time
	 */
	/**
	 * 
	 * @param request
	 * @param apiCountMap
	 * @return List<String> - list of parameters
	 */	
	private static List<String> parseRequest(String request,
			Map<String, CountAndTime> apiCountMap) {
		boolean isValidRequest = false;
		String param[] = request.split("\\s");
		String api = "";
		List<String> paramList = new ArrayList<String>();
		// parse the api name from the header
		if (param != null
				&& param.length >= 2
				&& (param[0].equalsIgnoreCase("GET") || param[0]
						.equalsIgnoreCase("POST"))) {
			api = param[1].charAt(0) == '/' ? param[1].substring(1) : api;
			api = param[1].charAt(0) == '/' && param[1].contains("?") ? param[1]
					.substring(1, param[1].indexOf("?")) : api;
		
		// only executes if parameter is present in the header
			if (api.length() > 2 && prop.containsKey(api)) {
				paramList.add(0, api);
				if (param[1].contains("?") && param[1].contains("order")
						&& param[1].contains("=")) {
					String order = param[1]
							.substring(param[1].indexOf("=") + 1);
					if (order.equalsIgnoreCase("ASC")
							|| order.equalsIgnoreCase("DESC")) {
						paramList.add(1,
								param[1].substring(param[1].indexOf("=") + 1));
						isValidRequest = true;
					}
				} else
					isValidRequest = true;

			}
		}

		if (isValidRequest) {
			CountAndTime ct = apiCountMap.get(api);
			String apiConfigParam = prop.getProperty(api, DEFAULT_RATE);
			int rate = Integer
					.parseInt("".equals(apiConfigParam) ? DEFAULT_RATE
							: apiConfigParam);
			long initTime = System.currentTimeMillis();
			// if request comes for the particular api first time
			if (ct.getTime() == 0) {
				ct.setStartTime(initTime);
				ct.setTime(initTime);
				ct.setCount(ct.getCount() + 1);
			}
			// If an api request hit count is not exceeding the limit but overall time taken by 
			// by the same api requests are larger than the allowed time then it resets the count and time
			else if ((ct.getTime() - ct.getStartTime()) > TIME_LIMIT) {
				initTime = System.currentTimeMillis();
				ct.setStartTime(initTime);
				ct.setTime(initTime);
				ct.setCount(0);
			} 
			// If the request hit time is greater than the allowed hit within the limited timeframe (10 sec)
			// puts the request on hold till 5 min ,and resets the time and count
			else if (rate <= ct.getCount()) {
				try {
					System.out.println("Too many request waiting for "
							+ TIME_LIMIT / 1000 + " seconds");
					Thread.sleep(SLEEP_TIME);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				initTime = System.currentTimeMillis();
				ct.setCount(0);
				ct.setStartTime(initTime);
			}
			// increments the counter and sets the time as current time
			else {
				ct.setTime(System.currentTimeMillis());
				ct.setCount(ct.getCount() + 1);
			}

			isValidRequest = false;
		} else {
			return Collections.emptyList();
		}

		return paramList;
	}
	/**
	 * This method takes care of every request sent by the Web client
	 */
/**
 * 
 * @param Socket s
 * @param Map apiCountMap
 */
	private static void HandleRequest(Socket s,
			Map<String, CountAndTime> apiCountMap) {

		BufferedReader in;
		String request;
		HotelInfoLoader loader = new HotelInfoLoader(FILE_PATH);

		try {
			String webServerAddress = s.getInetAddress().toString();
			System.out.println("New Connection:" + webServerAddress);
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
			request = in.readLine();
			System.out.println("--- Client request: " + request);
			// gets the parameter to fetch data
			List<String> params = parseRequest(request, apiCountMap);
			// if the parameter is not null
			if (params != null && !params.isEmpty()) {
				// process the request and get the response
				getResponse(s.getOutputStream(),
						loader.getHotelInfo(params.get(0)), params);
			} else {
				PrintWriter pw = new PrintWriter(s.getOutputStream(), true);

				pw.println("HTTP/1.1 404 Not Found");
				pw.println("Content-type: text/html");
				pw.println("Server-name: agoda\n");
				pw.println("<html><head>\n<title>Agoda </title>");
				/* style */
				pw.println("<STYLE type='text/css' media='screen'>");
				pw.println("<!--\nTD.navitem {\nTEXT-ALIGN: left\n}");
				pw.println(".navitem A:active {\nCOLOR: #ffffff; BACKGROUND-COLOR: #0088ff\n }");
				pw.println(".navitem A:visited {\nCOLOR: #000000;\n}");
				pw.println(".navitem A:hover {\nCOLOR: #ffffff; BACKGROUND-COLOR: #0088ff\n}");
				pw.println(".navitem A {\nCOLOR: #000000; FONT-FAMILY: Arial, sans-serif;  TEXT-DECORATION: none\n");
				pw.println("-->\n</STYLE></head>");
				pw.println("<body bgcolor=#ffffff>");
				pw.println("No Data Found");
				pw.println("</body>");
				pw.flush();
				pw.close();

			}

		} catch (IOException e) {
			System.out.println("Failed respond to client request: "
					+ e.getMessage());
		} finally {
			if (s != null) {
				try {
					s.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			}
		}
		return;

	}

	/**
	 * This method gets the data from the source and append it in response
	 */
	/**
	 * @param output
	 * @param infoMap
	 * @param params
	 * @throws IOException
	 */
	private static void getResponse(OutputStream output,
			Map<String, List<HotelInfo>> infoMap, List<String> params)
			throws IOException {

		PrintWriter pw = new PrintWriter(output, true);

		pw.println("HTTP/1.1 200 OK");
		pw.println("Content-type: text/html");
		pw.println("Server-name: agoda\n");
		pw.println("<html><head>\n<title>Agoda </title>");
		/* style */
		pw.println("<STYLE type='text/css' media='screen'>");
		pw.println("<!--\nTD.navitem {\nTEXT-ALIGN: left\n}");
		pw.println(".navitem A:active {\nCOLOR: #ffffff; BACKGROUND-COLOR: #0088ff\n }");
		pw.println(".navitem A:visited {\nCOLOR: #000000;\n}");
		pw.println(".navitem A:hover {\nCOLOR: #ffffff; BACKGROUND-COLOR: #0088ff\n}");
		pw.println(".navitem A {\nCOLOR: #000000; FONT-FAMILY: Arial, sans-serif;  TEXT-DECORATION: none\n");
		pw.println("-->\n</STYLE></head>");
		pw.println("<body bgcolor=#ffffff>");
		/* title */
		pw.println("<TABLE cellSpacing=0 cellPadding=5 border=2 width=800 align=center>");
		pw.println("<TR bgcolor=#0088ff>\n<h2><center>Agoda Booking Service</center></h2>");
		pw.println("</TR></TABLE></TR><TR>");
		/* main */
		pw.println("<TABLE cellSpacing=1 cellPadding=2 bgcolor=#f0f0f0 width=800 align=center border='1'><TR>");
		pw.println("<br><br>");

		StringBuffer response = new StringBuffer("");

		if (!params.isEmpty()) {
			response.append("<tr><th>CITY</th><th>HOTELID</th><th>ROOM</th><th>PRICE</th>");
			List<HotelInfo> infoList = infoMap.get(params.get(0));
			// sort the result as per the request
			if (params.size() == 2) {
				if (params.get(1).equalsIgnoreCase("ASC"))
					Collections.sort(infoList);
				else if (params.get(1).equalsIgnoreCase("DESC")) {
					Collections.sort(infoList, Collections.reverseOrder());
				}
			}

			// response is constructed
			for (HotelInfo info : infoList) {

				response.append("<tr><td><center>").append(info.getCityId())
						.append("</center></td><td><center>")
						.append(info.getHotelId())
						.append("</center></td><td><center>")
						.append(info.getRoomType())
						.append("</center></td><td><center>")
						.append(info.getPrice()).append("</center></td></tr>");

			}
			response.append("</table>");
		} else {
			response.append("<body>HTTP 404 error - Resource not found</body>");
		}

		pw.println(response);
		pw.println("\n</TABLE>\n</body>\n</html>");

		pw.flush();
		pw.close();

	}

}
